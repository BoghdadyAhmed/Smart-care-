/*

It seems like you're working on an Arduino sketch that collects data from various sensors and uploads that data to Firebase. 
The sketch includes sensors for temperature, humidity, pulse oximeter, gas, and an NTC sensor. The data is uploaded to a Firebase Realtime Database (RTDB). Below is a breakdown of the code:
*/

#include <Arduino.h>
#include <WiFi.h>
#include <Firebase_ESP_Client.h>
#include <DHT.h>
#include "MAX30100_PulseOximeter.h"

#define NTC_PIN 36
#define DHT_SENSOR_PIN 4
#define DHT_SENSOR_TYPE DHT22
#define AO_PIN 34

DHT dht_sensor(DHT_SENSOR_PIN, DHT_SENSOR_TYPE);

#include "addons/TokenHelper.h"
#include "addons/RTDBHelper.h"

#define  MAX30100_SDA_PIN 21
#define  MAX30100_SCL_PIN 22

// Insert your network credentials
#define WIFI_SSID "WE_D41818"
#define WIFI_PASSWORD "ff6eebaa"

// Insert Firebase project API Key
#define API_KEY "AIzaSyAReSnHJ3vciLiiHUUzH7A5zSvWl1J5oZA"

// Insert RTDB URLefine the RTDB URL */
#define DATABASE_URL "https://smart-care-acaec-default-rtdb.europe-west1.firebasedatabase.app/" 

FirebaseData fbdo;
FirebaseAuth auth;
FirebaseConfig config;

unsigned long sendDataPrevMillis = 0;
bool signupOK = false;

PulseOximeter pox;
uint32_t tsLastReport = 0;

void onBeatDetected() {
    Serial.println("Beat!");
}

void setup() {
    dht_sensor.begin();
    Serial.begin(115200);
    WiFi.begin(WIFI_SSID, WIFI_PASSWORD);

    Serial.print("Connecting to Wi-Fi");
    while (WiFi.status() != WL_CONNECTED) {
        Serial.print(".");
        delay(300);
    }
    Serial.println();
    Serial.print("Connected with IP: ");
    Serial.println(WiFi.localIP());
    Serial.println();

    config.api_key = API_KEY;
    config.database_url = DATABASE_URL;

    if (Firebase.signUp(&config, &auth, "", "")) {
        Serial.println("ok");
        signupOK = true;
    } else {
        Serial.printf("%s\n", config.signer.signupError.message.c_str());
    }

    config.token_status_callback = tokenStatusCallback;
    Firebase.begin(&config, &auth);
    Firebase.reconnectWiFi(true);
    Serial.print("Initializing pulse oximeter..");

    if (!pox.begin()) {
        Serial.println("FAILED");
        for (;;) ;
    } else {
        Serial.println("SUCCESS");
    }

    pox.setOnBeatDetectedCallback(onBeatDetected);
}

void loop() {
    pox.update();
    float Heart_rate = pox.getHeartRate();
    float SpO2 = pox.getSpO2();

    if (millis() - tsLastReport > 1000) {
        Serial.print("Heart rate:");
        Serial.print(Heart_rate);
        Serial.print("bpm / SpO2:");
        Serial.print(SpO2);
        Serial.println("%");

        if (Firebase.ready() && signupOK) {
            sendDataPrevMillis = millis();

            if (Firebase.RTDB.setInt(&fbdo, "/PulseOximeter/HeartRate", Heart_rate)) {
                Serial.print("Heart rate uploaded to Firebase: ");
                Serial.println(Heart_rate);
            } else {
                Serial.println("Failed to upload Heart Rate to Firebase");
                Serial.println("REASON: " + fbdo.errorReason());
            }

            if (Firebase.RTDB.setInt(&fbdo, "PulseOximeter/SpO2", SpO2)) {
                Serial.print("SpO2 uploaded to Firebase: ");
                Serial.println(SpO2);
            } else {
                Serial.println("Failed to upload SpO2 to Firebase");
                Serial.println("REASON: " + fbdo.errorReason());
            }
        } else {
            Serial.println("Firebase not ready");
        }

        tsLastReport = millis();
    }

    delay(5000);

    float temperature = dht_sensor.readTemperature();
    float humidity = dht_sensor.readHumidity();

    if (Firebase.ready() && signupOK && (millis() - sendDataPrevMillis > 100 || sendDataPrevMillis == 0)) {
        sendDataPrevMillis = millis();

        if (Firebase.RTDB.setInt(&fbdo, "DHT_22/Temperature", temperature)) {
            Serial.print("Temperature : ");
            Serial.println(temperature);
        } else {
            Serial.println("Failed to Read from the Sensor");
            Serial.println("REASON: " + fbdo.errorReason());
        }

        if (Firebase.RTDB.setFloat(&fbdo, "DHT_22/Humidity", humidity)) {
            Serial.print("Humidity : ");
            Serial.print(humidity);
        } else {
            Serial.println("Failed to Read from the Sensor");
            Serial.println("REASON: " + fbdo.errorReason());
        }
    }

    int gasValue = analogRead(AO_PIN);
    if (Firebase.RTDB.setInt(&fbdo, "/gasValue", gasValue)) {
        Serial.println("Gas Value uploaded to Firebase: " + String(gasValue));
    } else {
        Serial.println("Failed to upload Gas Value to Firebase");
        Serial.println("REASON: " + fbdo.errorReason());
    }

    delay(5000);

    int ntcValue = analogRead(NTC_PIN);
    float body_temperature = convertToTemperature(ntcValue);
    if (Firebase.RTDB.setFloat(&fbdo, "/temperature", body_temperature)) {
        Serial.println("Temperature uploaded to Firebase: " + String(body_temperature) + " C");
    } else {
        Serial.println("Failed to upload Temperature to Firebase");
        Serial.println("REASON: " + fbdo.errorReason());
    }

    delay(5000);
}

float convertToTemperature(int resistanceValue) {
    float body_temperature = map(resistanceValue, 0, 4095, 0, 100);
    return body_temperature;
}


/*
Arduino-MAX30100 oximetry / heart rate integrated sensor library
Copyright (C) 2016  OXullo Intersecans <x@brainrapers.org>

This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/

#include <Wire.h>
#include "MAX30100_PulseOximeter.h"

#define REPORTING_PERIOD_MS     1000

// PulseOximeter is the higher level interface to the sensor
// it offers:
//  * beat detection reporting
//  * heart rate calculation
//  * SpO2 (oxidation level) calculation
PulseOximeter pox;

uint32_t tsLastReport = 0;

// Callback (registered below) fired when a pulse is detected
void onBeatDetected()
{
    Serial.println("Beat!");
}

void setup()
{
    Serial.begin(115200);

    Serial.print("Initializing pulse oximeter..");

    // Initialize the PulseOximeter instance
    // Failures are generally due to an improper I2C wiring, missing power supply
    // or wrong target chip
    if (!pox.begin()) {
        Serial.println("FAILED");
        for(;;);
    } else {
        Serial.println("SUCCESS");
    }

    // The default current for the IR LED is 50mA and it could be changed
    //   by uncommenting the following line. Check MAX30100_Registers.h for all the
    //   available options.
    // pox.setIRLedCurrent(MAX30100_LED_CURR_7_6MA);

    // Register a callback for the beat detection
    pox.setOnBeatDetectedCallback(onBeatDetected);
}

void loop()
{
    // Make sure to call update as fast as possible
    pox.update();

    // Asynchronously dump heart rate and oxidation levels to the serial
    // For both, a value of 0 means "invalid"
    if (millis() - tsLastReport > REPORTING_PERIOD_MS) {
        Serial.print("Heart rate:");
        Serial.print(pox.getHeartRate());
        Serial.print("bpm / SpO2:");
        Serial.print(pox.getSpO2());
        Serial.println("%");

        tsLastReport = millis();
    }
}
